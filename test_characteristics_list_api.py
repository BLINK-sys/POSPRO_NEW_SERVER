#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
"""

import requests
import json

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://127.0.0.1:5000"

def login_admin():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞"""
    login_data = {
        "email": "bocan.anton@mail.ru",
        "password": "1"
    }
    
    response = requests.post(f"{BASE_URL}/auth/login", json=login_data)
    if response.status_code == 200:
        data = response.json()
        if data.get('success'):
            return data['data']['access_token']
    return None

def test_get_characteristics_list(token):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")
    
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(f"{BASE_URL}/characteristics-list", headers=headers)
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"–û—Ç–≤–µ—Ç: {json.dumps(response.json(), ensure_ascii=False, indent=2)}")
    print()

def test_create_characteristic(token):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
    print("‚ûï –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏...")
    
    headers = {"Authorization": f"Bearer {token}"}
    data = {
        "characteristic_key": "–í–ï–°",
        "unit_of_measurement": "–∫–≥"
    }
    
    response = requests.post(f"{BASE_URL}/characteristics-list", json=data, headers=headers)
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"–û—Ç–≤–µ—Ç: {json.dumps(response.json(), ensure_ascii=False, indent=2)}")
    print()
    
    return response.json().get('data', {}).get('id') if response.status_code == 201 else None

def test_create_characteristic_without_unit(token):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    print("‚ûï –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è...")
    
    headers = {"Authorization": f"Bearer {token}"}
    data = {
        "characteristic_key": "–¶–í–ï–¢"
    }
    
    response = requests.post(f"{BASE_URL}/characteristics-list", json=data, headers=headers)
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"–û—Ç–≤–µ—Ç: {json.dumps(response.json(), ensure_ascii=False, indent=2)}")
    print()
    
    return response.json().get('data', {}).get('id') if response.status_code == 201 else None

def test_get_characteristic(token, characteristic_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ ID"""
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ID {characteristic_id}...")
    
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(f"{BASE_URL}/characteristics-list/{characteristic_id}", headers=headers)
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"–û—Ç–≤–µ—Ç: {json.dumps(response.json(), ensure_ascii=False, indent=2)}")
    print()

def test_update_characteristic(token, characteristic_id):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
    print(f"‚úèÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ID {characteristic_id}...")
    
    headers = {"Authorization": f"Bearer {token}"}
    data = {
        "characteristic_key": "–í–ï–°_–û–ë–ù–û–í–õ–ï–ù",
        "unit_of_measurement": "–≥"
    }
    
    response = requests.put(f"{BASE_URL}/characteristics-list/{characteristic_id}", json=data, headers=headers)
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"–û—Ç–≤–µ—Ç: {json.dumps(response.json(), ensure_ascii=False, indent=2)}")
    print()

def test_delete_characteristic(token, characteristic_id):
    """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
    print(f"üóëÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ID {characteristic_id}...")
    
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.delete(f"{BASE_URL}/characteristics-list/{characteristic_id}", headers=headers)
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"–û—Ç–≤–µ—Ç: {json.dumps(response.json(), ensure_ascii=False, indent=2)}")
    print()

def main():
    print("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
    print("=" * 60)
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    token = login_admin()
    if not token:
        print("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
        return
    
    print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
    print()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
    test_get_characteristics_list(token)
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    weight_id = test_create_characteristic(token)
    color_id = test_create_characteristic_without_unit(token)
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
    test_get_characteristics_list(token)
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if weight_id:
        test_get_characteristic(token, weight_id)
    
    # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if weight_id:
        test_update_characteristic(token, weight_id)
        test_get_characteristic(token, weight_id)
    
    # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    if weight_id:
        test_delete_characteristic(token, weight_id)
    if color_id:
        test_delete_characteristic(token, color_id)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
    test_get_characteristics_list(token)
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
