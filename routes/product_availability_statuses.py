from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt
from extensions import db
from models.product_availability_status import ProductAvailabilityStatus

product_availability_statuses_bp = Blueprint('product_availability_statuses', __name__)


# üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞–ª–∏—á–∏—è
@product_availability_statuses_bp.route('/product-availability-statuses', methods=['GET'])
@jwt_required()
def get_product_availability_statuses():
    try:
        jwt_data = get_jwt()
        role = jwt_data.get('role')

        if role != 'admin':
            return jsonify({
                'success': False,
                'message': '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º'
            }), 403

        statuses = ProductAvailabilityStatus.query.order_by(ProductAvailabilityStatus.order).all()
        return jsonify([status.to_dict() for status in statuses])
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤: {str(e)}'}), 500


# üîπ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è
@product_availability_statuses_bp.route('/product-availability-statuses', methods=['POST'])
@jwt_required()
def create_product_availability_status():
    try:
        jwt_data = get_jwt()
        role = jwt_data.get('role')

        if role != 'admin':
            return jsonify({
                'success': False,
                'message': '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º'
            }), 403

        data = request.get_json()
        print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['status_name', 'condition_operator', 'condition_value']
        for field in required_fields:
            if field not in data or (field != 'condition_value' and not data[field]):
                return jsonify({'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400
        
        # –û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è condition_value (–º–æ–∂–µ—Ç –±—ã—Ç—å 0)
        if 'condition_value' not in data:
            return jsonify({'error': '–ü–æ–ª–µ condition_value –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        valid_operators = ['>', '<', '=', '>=', '<=']
        if data['condition_operator'] not in valid_operators:
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: >, <, =, >=, <='}), 400
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è
        try:
            condition_value = int(data['condition_value'])
            if condition_value < 0:
                return jsonify({'error': '–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º'}), 400
        except (ValueError, TypeError):
            return jsonify({'error': '–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä—è–¥–æ–∫
        max_order = db.session.query(db.func.max(ProductAvailabilityStatus.order)).scalar() or 0
        
        new_status = ProductAvailabilityStatus(
            status_name=data['status_name'],
            condition_operator=data['condition_operator'],
            condition_value=condition_value,
            background_color=data.get('background_color', '#ffffff'),
            text_color=data.get('text_color', '#000000'),
            order=max_order + 1,
            active=data.get('active', True)
        )
        
        db.session.add(new_status)
        db.session.commit()
        
        return jsonify({
            'message': '–°—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
            'status': new_status.to_dict()
        }), 201
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}'}), 500


# üîπ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è
@product_availability_statuses_bp.route('/product-availability-statuses/<int:status_id>', methods=['PUT'])
@jwt_required()
def update_product_availability_status(status_id):
    try:
        jwt_data = get_jwt()
        role = jwt_data.get('role')

        if role != 'admin':
            return jsonify({
                'success': False,
                'message': '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º'
            }), 403

        status = ProductAvailabilityStatus.query.get(status_id)
        if not status:
            return jsonify({'error': '–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if 'status_name' in data and not data['status_name']:
            return jsonify({'error': '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        if 'condition_operator' in data:
            valid_operators = ['>', '<', '=', '>=', '<=']
            if data['condition_operator'] not in valid_operators:
                return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: >, <, =, >=, <='}), 400
        
        if 'condition_value' in data:
            try:
                condition_value = int(data['condition_value'])
                if condition_value < 0:
                    return jsonify({'error': '–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º'}), 400
                status.condition_value = condition_value
            except (ValueError, TypeError):
                return jsonify({'error': '–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º'}), 400
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        if 'status_name' in data:
            status.status_name = data['status_name']
        if 'condition_operator' in data:
            status.condition_operator = data['condition_operator']
        if 'background_color' in data:
            status.background_color = data['background_color']
        if 'text_color' in data:
            status.text_color = data['text_color']
        if 'active' in data:
            status.active = data['active']
        
        db.session.commit()
        
        return jsonify({
            'message': '–°—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            'status': status.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}'}), 500


# üîπ –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è
@product_availability_statuses_bp.route('/product-availability-statuses/<int:status_id>', methods=['DELETE'])
@jwt_required()
def delete_product_availability_status(status_id):
    try:
        jwt_data = get_jwt()
        role = jwt_data.get('role')

        if role != 'admin':
            return jsonify({
                'success': False,
                'message': '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º'
            }), 403

        status = ProductAvailabilityStatus.query.get(status_id)
        if not status:
            return jsonify({'error': '–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        db.session.delete(status)
        db.session.commit()
        
        return jsonify({'message': '–°—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}'}), 500


# üîπ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤
@product_availability_statuses_bp.route('/product-availability-statuses/reorder', methods=['POST'])
@jwt_required()
def reorder_product_availability_statuses():
    try:
        jwt_data = get_jwt()
        role = jwt_data.get('role')

        if role != 'admin':
            return jsonify({
                'success': False,
                'message': '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º'
            }), 403

        data = request.get_json()
        if 'statuses' not in data or not isinstance(data['statuses'], list):
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'}), 400
        
        for item in data['statuses']:
            if 'id' not in item or 'order' not in item:
                continue
            
            status = ProductAvailabilityStatus.query.get(item['id'])
            if status:
                status.order = item['order']
        
        db.session.commit()
        return jsonify({'message': '–ü–æ—Ä—è–¥–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞: {str(e)}'}), 500


# üîπ –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
@product_availability_statuses_bp.route('/product-availability-statuses/check/<int:quantity>', methods=['GET'])
def get_status_for_quantity(quantity):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Ä—è–¥–∫—É
        statuses = ProductAvailabilityStatus.query.filter_by(active=True).order_by(ProductAvailabilityStatus.order).all()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞—Ç—É—Å
        for status in statuses:
            if status.check_condition(quantity):
                return jsonify({
                    'status': status.to_dict(),
                    'formula': status.get_formula_display()
                })
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞—Ç—É—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        return jsonify({'status': None, 'formula': None})
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}'}), 500
