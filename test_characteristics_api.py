#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API characteristics_list
"""

import requests
import json

# –ë–∞–∑–æ–≤—ã–π URL (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
BASE_URL = "https://pospro-new-server.onrender.com"
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
AUTH_TOKEN = "YOUR_AUTH_TOKEN_HERE"
ADMIN_TOKEN = "YOUR_ADMIN_TOKEN_HERE"

def test_get_characteristics():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/characteristics-list...")
    
    headers = {"Authorization": f"Bearer {AUTH_TOKEN}"}
    response = requests.get(f"{BASE_URL}/api/characteristics-list", headers=headers)
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {len(data.get('data', []))} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return False

def test_get_characteristic_by_id():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ ID"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/characteristics-list/1...")
    
    headers = {"Authorization": f"Bearer {AUTH_TOKEN}"}
    response = requests.get(f"{BASE_URL}/api/characteristics-list/1", headers=headers)
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {data.get('data', {}).get('characteristic_key')}")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return False

def test_create_characteristic():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /api/characteristics-list...")
    
    headers = {
        "Authorization": f"Bearer {ADMIN_TOKEN}",
        "Content-Type": "application/json"
    }
    
    data = {
        "characteristic_key": "–¢–ï–°–¢_–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê",
        "unit_of_measurement": "—Ç–µ—Å—Ç"
    }
    
    response = requests.post(f"{BASE_URL}/api/characteristics-list", 
                           headers=headers, 
                           json=data)
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    if response.status_code == 201:
        result = response.json()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –°–æ–∑–¥–∞–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ID: {result.get('data', {}).get('id')}")
        return result.get('data', {}).get('id')
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return None

def test_update_characteristic(characteristic_id):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
    if not characteristic_id:
        print("\n‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–µ—Ç ID)")
        return False
        
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º PUT /api/characteristics-list/{characteristic_id}...")
    
    headers = {
        "Authorization": f"Bearer {ADMIN_TOKEN}",
        "Content-Type": "application/json"
    }
    
    data = {
        "characteristic_key": "–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø_–¢–ï–°–¢_–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê",
        "unit_of_measurement": "–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ_–µ–¥–∏–Ω–∏—Ü—ã"
    }
    
    response = requests.put(f"{BASE_URL}/api/characteristics-list/{characteristic_id}", 
                           headers=headers, 
                           json=data)
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    if response.status_code == 200:
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ! –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return False

def test_delete_characteristic(characteristic_id):
    """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
    if not characteristic_id:
        print("\n‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è (–Ω–µ—Ç ID)")
        return False
        
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º DELETE /api/characteristics-list/{characteristic_id}...")
    
    headers = {"Authorization": f"Bearer {ADMIN_TOKEN}"}
    response = requests.delete(f"{BASE_URL}/api/characteristics-list/{characteristic_id}", 
                             headers=headers)
    
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    if response.status_code == 200:
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ! –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API characteristics_list")
    print("=" * 50)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
    print("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å AUTH_TOKEN –∏ ADMIN_TOKEN –≤ —Å–∫—Ä–∏–ø—Ç–µ!")
    
    tests_passed = 0
    total_tests = 5
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫
    if test_get_characteristics():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–∏—Ç—å –ø–æ ID
    if test_get_characteristic_by_id():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
    created_id = test_create_characteristic()
    if created_id:
        tests_passed += 1
    
    # –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–∏—Ç—å
    if test_update_characteristic(created_id):
        tests_passed += 1
    
    # –¢–µ—Å—Ç 5: –£–¥–∞–ª–∏—Ç—å
    if test_delete_characteristic(created_id):
        tests_passed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if tests_passed == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    main()
