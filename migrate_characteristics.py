#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã product_characteristic
- –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É characteristic_id
- –£–¥–∞–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É key
- –°–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π characteristics_list
"""

import os
import sys
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import Config

def run_migration():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        engine = create_engine(Config.DATABASE_URL)
        
        with engine.connect() as conn:
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            trans = conn.begin()
            
            try:
                print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü—ã product_characteristic...")
                
                # 1. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É characteristic_id
                print("üìù –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É characteristic_id...")
                conn.execute(text("""
                    ALTER TABLE product_characteristic 
                    ADD COLUMN characteristic_id INTEGER
                """))
                
                # 2. –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ characteristics_list —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                print("üîó –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á...")
                conn.execute(text("""
                    ALTER TABLE product_characteristic 
                    ADD CONSTRAINT fk_product_characteristic_characteristic_id 
                    FOREIGN KEY (characteristic_id) REFERENCES characteristics_list(id)
                """))
                
                # 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–ª–æ–Ω–∫—É key
                print("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–ª–æ–Ω–∫—É key...")
                conn.execute(text("""
                    ALTER TABLE product_characteristic 
                    DROP COLUMN key
                """))
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                trans.commit()
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                
            except SQLAlchemyError as e:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                trans.rollback()
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
                raise
                
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

def check_table_exists():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã characteristics_list"""
    try:
        engine = create_engine(Config.DATABASE_URL)
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'characteristics_list'
                );
            """))
            exists = result.scalar()
            return exists
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã characteristics_list
    if not check_table_exists():
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ characteristics_list –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É characteristics_list —á–µ—Ä–µ–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
        sys.exit(1)
    
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ characteristics_list –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
    if response.lower() != 'yes':
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        sys.exit(0)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    run_migration()
