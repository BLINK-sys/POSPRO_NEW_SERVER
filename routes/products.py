import os
import shutil
import re
import unicodedata
from flask import Blueprint, request, jsonify, current_app
import logging
from extensions import db
from models import ProductDocument, ProductCharacteristic
from models.product import Product
from models.media import ProductMedia

products_bp = Blueprint('products', __name__)
logger = logging.getLogger(__name__)

def safe_slugify(text):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è slug –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    –†–∞–±–æ—Ç–∞–µ—Ç —Å Python 3 –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã.
    """
    if not text:
        return ''
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º Unicode —Å–∏–º–≤–æ–ª—ã
    text = unicodedata.normalize('NFKD', str(text))
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏
    russian_to_latin = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'E',
        '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
        '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
        '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
        '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
    }
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    for russian, latin in russian_to_latin.items():
        text = text.replace(russian, latin)
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    text = re.sub(r'[^\w\s-]', '', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    text = re.sub(r'[-\s]+', '-', text)
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
    text = text.strip('-')
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    return text.lower()

def generate_unique_slug(name, product_id=None):
    base_slug = safe_slugify(name)
    slug = base_slug
    counter = 1

    while True:
        query = Product.query.filter_by(slug=slug)
        if product_id:
            query = query.filter(Product.id != product_id)
        if not query.first():
            break
        slug = f"{base_slug}-{counter}"
        counter += 1

    return slug


# üîπ –°–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
@products_bp.route('/draft', methods=['POST'])
def create_draft_product():
    try:
        import uuid
        import time
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        unique_article = f"DRAFT-{int(time.time())}-{str(uuid.uuid4())[:8]}"
        
        draft_product = Product(
            name='',
            article=unique_article,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª
            slug='draft',
            price=0,
            wholesale_price=0,
            quantity=0,
            is_visible=False,
            country='',
            brand='',
            description='',
            status=None,
            is_draft=True,
            category_id=None
        )
        
        db.session.add(draft_product)
        db.session.commit()
        
        return jsonify({"id": draft_product.id, "article": draft_product.article}), 201
        
    except Exception as e:
        db.session.rollback()
        return jsonify({"message": str(e)}), 500


# üîπ –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ + –ø–∞–ø–∫—É
@products_bp.route('/draft/<int:product_id>', methods=['DELETE'])
def delete_draft(product_id):
    try:
        print(f"–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ ID: {product_id}")
        
        product = Product.query.get_or_404(product_id)
        print(f"–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {product.name} (ID: {product.id}, is_draft: {product.is_draft})")
        
        if not product.is_draft:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ-—á–µ—Ä–Ω–æ–≤–∏–∫ —Ç–æ–≤–∞—Ä ID: {product_id}")
            return jsonify({'error': 'Cannot delete finalized product'}), 400

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        print(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID: {product_id}")
        
        media_deleted = ProductMedia.query.filter_by(product_id=product_id).delete()
        documents_deleted = ProductDocument.query.filter_by(product_id=product_id).delete()
        characteristics_deleted = ProductCharacteristic.query.filter_by(product_id=product_id).delete()
        print(f"–£–¥–∞–ª–µ–Ω–æ –º–µ–¥–∏–∞: {media_deleted}, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {documents_deleted}, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {characteristics_deleted}")

        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏
        folder_path = os.path.join(current_app.config['UPLOAD_FOLDER'], 'products', str(product_id))
        try:
            if os.path.exists(folder_path):
                shutil.rmtree(folder_path)
                print(f"–ü–∞–ø–∫–∞ {folder_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            else:
                print(f"–ü–∞–ø–∫–∞ {folder_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ {folder_path}: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–∞–º —Ç–æ–≤–∞—Ä
        print(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î: {product.id}")
        db.session.delete(product)
        db.session.commit()
        
        print(f"–ß–µ—Ä–Ω–æ–≤–∏–∫ ID: {product_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î")
        return jsonify({'message': 'Draft deleted successfully'})
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ ID {product_id}: {str(e)}")
        db.session.rollback()
        return jsonify({'error': f'Error deleting draft: {str(e)}'}), 500


# ÔøΩÔøΩ –§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
@products_bp.route('/<int:product_id>/finalize', methods=['PUT'])
def finalize_product(product_id):
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ ID: {product_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        product = Product.query.get_or_404(product_id)
        logger.info(f"–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {product.name} (ID: {product.id}, is_draft: {product.is_draft})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —è–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º
        if not product.is_draft:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ-—á–µ—Ä–Ω–æ–≤–∏–∫ —Ç–æ–≤–∞—Ä ID: {product_id}")
            return jsonify({'error': '–¢–æ–≤–∞—Ä —É–∂–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}), 400
        
        data = request.json or {}
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {list(data.keys())}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['name', 'article']
        missing_fields = [field for field in required_fields if not data.get(field)]
        if missing_fields:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
            return jsonify({'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}'}), 400
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_name = product.name
        old_slug = product.slug
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞
        try:
            product.name = data.get('name', '')
            product.article = data.get('article', '')
            product.price = data.get('price', 0)
            product.wholesale_price = data.get('wholesale_price', 0)
            product.quantity = data.get('quantity', 0)
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ –±—Ä–µ–Ω–¥–∞
            status = data.get('status', product.status)
            brand = data.get('brand', product.brand)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ 'no'
            if str(status) == 'no':
                status = None
            if str(brand) == 'no':
                brand = ''

            product.status = status            
            product.is_visible = data.get('is_visible', False)
            product.country = data.get('country', '')
            product.brand = brand
            product.description = data.get('description', '')
            product.category_id = data.get('category_id')
            
            logger.info(f"–ü–æ–ª—è —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: name='{product.name}', article='{product.article}', price={product.price}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–∞: {str(e)}")
            return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞'}), 500
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π slug
        try:
            product.slug = generate_unique_slug(product.name, product.id)
            logger.info(f"Slug —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: '{old_slug}' -> '{product.slug}'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug: {str(e)}")
            return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL —Ç–æ–≤–∞—Ä–∞'}), 500
        
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        product.is_draft = False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            db.session.commit()
            logger.info(f"–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ID={product.id}")
            return jsonify({'message': 'Product finalized successfully', 'id': product.id})
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {str(e)}")
            db.session.rollback()
            return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞'}), 500
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ ID {product_id}: {str(e)}")
        db.session.rollback()
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞'}), 500


# üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
@products_bp.route('/', methods=['GET'])
def get_products():
    products = Product.query.all()
    result = []

    for p in products:
        first_image = ProductMedia.query.filter_by(product_id=p.id, media_type='image') \
            .order_by(ProductMedia.order).first()

        result.append({
            'id': p.id,
            'name': p.name,
            'slug': p.slug,
            'article': p.article,
            'price': p.price,
            'wholesale_price': p.wholesale_price,
            'quantity': p.quantity,
            'status': 'no' if p.status is None else str(p.status),
            'is_visible': p.is_visible,
            'country': p.country,
            'brand': 'no' if not p.brand else p.brand,
            'description': p.description,
            'category_id': p.category_id,
            'image': first_image.url if first_image else None
        })

    return jsonify(result)


# üîπ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ slug
@products_bp.route('/<string:slug>', methods=['GET'])
def get_product_by_slug(slug):
    product = Product.query.filter_by(slug=slug).first_or_404()

    first_image = ProductMedia.query.filter_by(product_id=product.id, media_type='image') \
        .order_by(ProductMedia.order).first()

    # üß© –í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    characteristics = ProductCharacteristic.query.filter_by(product_id=product.id).all()
    characteristics_data = [{
        'id': c.id,
        'key': c.key,
        'value': c.value,
        'sort_order': c.sort_order
    } for c in characteristics]

    # üñºÔ∏è –í—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
    media = ProductMedia.query.filter_by(product_id=product.id).order_by(ProductMedia.order).all()
    media_data = [{
        'id': m.id,
        'media_type': m.media_type,
        'url': m.url,
        'order': m.order
    } for m in media]

    # üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã
    documents = ProductDocument.query.filter_by(product_id=product.id, file_type='doc').all()
    documents_data = [{
        'id': d.id,
        'filename': d.filename,
        'url': d.url,
        'file_type': d.file_type,
        'mime_type': d.mime_type
    } for d in documents]

    # ‚öôÔ∏è –î—Ä–∞–π–≤–µ—Ä—ã
    drivers = ProductDocument.query.filter_by(product_id=product.id, file_type='driver').all()
    drivers_data = [{
        'id': d.id,
        'filename': d.filename,
        'url': d.url,
        'file_type': d.file_type,
        'mime_type': d.mime_type
    } for d in drivers]

    result = {
        'id': product.id,
        'name': product.name,
        'slug': product.slug,
        'article': product.article,
        'price': product.price,
        'wholesale_price': product.wholesale_price,
        'quantity': product.quantity,
        'status': 'no' if product.status is None else str(product.status),
        'is_visible': product.is_visible,
        'country': product.country,
        'brand': 'no' if not product.brand else product.brand,
        'description': product.description,
        'category_id': product.category_id,
        'image': first_image.url if first_image else None,

        # –ù–æ–≤—ã–µ –ø–æ–ª—è:
        'characteristics': characteristics_data,
        'media': media_data,
        'documents': documents_data,
        'drivers': drivers_data,
    }

    return jsonify(result)


# üîπ –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä (–Ω–µ —á–µ—Ä–Ω–æ–≤–∏–∫)
@products_bp.route('/', methods=['POST'])
def create_product():
    try:
        logger.info("–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
        data = request.json or {}
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {list(data.keys())}")

        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ –±—Ä–µ–Ω–¥–∞
        status = data.get('status')
        brand = data.get('brand')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ 'no'
        if str(status) == 'no':
            status = None
        if str(brand) == 'no':
            brand = ''

        name = data.get('name', '')
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ slug –¥–ª—è —Ç–æ–≤–∞—Ä–∞: '{name}'")
        
        try:
            slug = generate_unique_slug(name)
            logger.info(f"Slug —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: '{slug}'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug: {str(e)}")
            return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL —Ç–æ–≤–∞—Ä–∞'}), 500

        product = Product(
            name=name,
            article=data.get('article', ''),
            slug=slug,
            price=data.get('price', 0),
            wholesale_price=data.get('wholesale_price', 0),
            quantity=data.get('quantity', 0),
            status=status,
            is_visible=data.get('is_visible', True),
            country=data.get('country', ''),
            brand=brand,
            description=data.get('description', ''),
            category_id=data.get('category_id'),
            is_draft=False
        )
        
        logger.info(f"–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–º—è—Ç–∏: name='{product.name}', article='{product.article}'")
        
        db.session.add(product)
        db.session.commit()
        
        logger.info(f"–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: ID={product.id}")
        return jsonify({'message': 'Product created', 'id': product.id}), 201
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        db.session.rollback()
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞'}), 500


# üîπ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
@products_bp.route('/<int:product_id>', methods=['PUT'])
def update_product(product_id):
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ID: {product_id}")
        product = Product.query.get_or_404(product_id)
        data = request.json or {}
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {list(data.keys())}")

        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ –±—Ä–µ–Ω–¥–∞
        status = data.get('status', product.status)
        brand = data.get('brand', product.brand)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ 'no'
        if str(status) == 'no':
            status = None
        if str(brand) == 'no':
            brand = ''

        new_name = data.get('name', product.name)
        if new_name != product.name:
            logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: '{product.name}' -> '{new_name}'")
            try:
                product.slug = generate_unique_slug(new_name, product.id)
                logger.info(f"–ù–æ–≤—ã–π slug —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: '{product.slug}'")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug: {str(e)}")
                return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL —Ç–æ–≤–∞—Ä–∞'}), 500

        product.name = new_name
        product.article = data.get('article', product.article)
        product.price = data.get('price', product.price)
        product.wholesale_price = data.get('wholesale_price', product.wholesale_price)
        product.quantity = data.get('quantity', product.quantity)
        product.status = status
        product.brand = brand
        product.is_visible = data.get('is_visible', product.is_visible)
        product.country = data.get('country', product.country)
        product.description = data.get('description', product.description)
        product.category_id = data.get('category_id', product.category_id)

        logger.info(f"–ü–æ–ª—è —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: name='{product.name}', article='{product.article}'")
        
        db.session.commit()
        logger.info(f"–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: ID={product.id}")
        return jsonify({'message': 'Product updated'})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ID {product_id}: {str(e)}")
        db.session.rollback()
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞'}), 500


# üîπ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä + –ø–∞–ø–∫—É
@products_bp.route('/<int:product_id>', methods=['DELETE'])
def delete_product(product_id):
    product = Product.query.get_or_404(product_id)

    ProductMedia.query.filter_by(product_id=product_id).delete()
    ProductDocument.query.filter_by(product_id=product_id).delete()

    folder_path = os.path.join(current_app.config['UPLOAD_FOLDER'], 'products', str(product_id))
    try:
        if os.path.exists(folder_path):
            shutil.rmtree(folder_path)
            print(f"–ü–∞–ø–∫–∞ {folder_path} —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")

    db.session.delete(product)
    db.session.commit()
    return jsonify({'message': 'Product deleted'})

@products_bp.route('/search', methods=['GET'])
def search_products():
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    query = request.args.get('q', '').strip()
    
    if not query:
        return jsonify([])
    
    # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
    products = Product.query.filter(
        Product.name.ilike(f'%{query}%'),
        Product.is_visible == True,
        Product.is_draft == False
    ).limit(10).all()
    
    result = []
    for p in products:
        first_image = ProductMedia.query.filter_by(product_id=p.id, media_type='image') \
            .order_by(ProductMedia.order).first()
        
        result.append({
            'id': p.id,
            'name': p.name,
            'slug': p.slug,
            'article': p.article,
            'price': p.price,
            'wholesale_price': p.wholesale_price,
            'quantity': p.quantity,
            'status': 'no' if p.status is None else str(p.status),
            'is_visible': p.is_visible,
            'country': p.country,
            'brand': 'no' if not p.brand else p.brand,
            'description': p.description,
            'category_id': p.category_id,
            'image': first_image.url if first_image else None
        })
    
    return jsonify(result)

@products_bp.route('/brand/<string:brand_name>', methods=['GET'])
def get_products_by_brand(brand_name):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –±—Ä–µ–Ω–¥—É"""
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ URL
        import urllib.parse
        brand_name = urllib.parse.unquote(brand_name)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –±—Ä–µ–Ω–¥—É
        products = Product.query.filter(
            Product.brand == brand_name,
            Product.is_visible == True,
            Product.is_draft == False
        ).all()
        
        result = []
        for p in products:
            first_image = ProductMedia.query.filter_by(product_id=p.id, media_type='image') \
                .order_by(ProductMedia.order).first()
            
            result.append({
                'id': p.id,
                'name': p.name,
                'slug': p.slug,
                'article': p.article,
                'price': p.price,
                'wholesale_price': p.wholesale_price,
                'quantity': p.quantity,
                'status': 'no' if p.status is None else str(p.status),
                'is_visible': p.is_visible,
                'country': p.country,
                'brand': 'no' if not p.brand else p.brand,
                'description': p.description,
                'category_id': p.category_id,
                'image': first_image.url if first_image else None
            })
        
        return jsonify({
            'brand': brand_name,
            'products': result,
            'total_count': len(result)
        })
    except Exception as e:
        logger.error(f"Error getting products by brand {brand_name}: {str(e)}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –±—Ä–µ–Ω–¥—É'}), 500

@products_bp.route('/brand/<string:brand_name>/detailed', methods=['GET'])
def get_products_by_brand_detailed(brand_name):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –±—Ä–µ–Ω–¥—É —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (—Å—Ç–∞—Ç—É—Å, –±—Ä–µ–Ω–¥, –∫–∞—Ç–µ–≥–æ—Ä–∏—è)"""
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ URL
        import urllib.parse
        brand_name = urllib.parse.unquote(brand_name)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏
        from models.status import Status
        from models.brand import Brand
        from models.category import Category
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –±—Ä–µ–Ω–¥—É —Å –¥–∂–æ–π–Ω–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        products = Product.query.filter(
            Product.brand == brand_name,
            Product.is_visible == True,
            Product.is_draft == False
        ).all()
        
        result = []
        for p in products:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            first_image = ProductMedia.query.filter_by(product_id=p.id, media_type='image') \
                .order_by(ProductMedia.order).first()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
            status_info = None
            if p.status:
                status_obj = Status.query.get(p.status)
                if status_obj:
                    status_info = {
                        'id': status_obj.id,
                        'name': status_obj.name,
                        'background_color': status_obj.background_color,
                        'text_color': status_obj.text_color
                    }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ
            brand_info = None
            if p.brand:
                brand_obj = Brand.query.filter_by(name=p.brand).first()
                if brand_obj:
                    brand_info = {
                        'id': brand_obj.id,
                        'name': brand_obj.name,
                        'country': brand_obj.country,
                        'description': brand_obj.description,
                        'image_url': brand_obj.image_url
                    }
                else:
                    # –ï—Å–ª–∏ –±—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ Brand, —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
                    brand_info = {
                        'id': None,
                        'name': p.brand,
                        'country': p.country,
                        'description': None,
                        'image_url': None
                    }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_info = None
            if p.category_id:
                category_obj = Category.query.get(p.category_id)
                if category_obj:
                    category_info = {
                        'id': category_obj.id,
                        'name': category_obj.name,
                        'slug': category_obj.slug,
                        'description': category_obj.description,
                        'image_url': category_obj.image_url
                    }
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è
            availability_status = None
            if p.quantity > 0:
                availability_status = {
                    'status_name': '–ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏',
                    'background_color': '#10b981',
                    'text_color': '#ffffff'
                }
            else:
                availability_status = {
                    'status_name': '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏',
                    'background_color': '#ef4444',
                    'text_color': '#ffffff'
                }
            
            result.append({
                'id': p.id,
                'name': p.name,
                'slug': p.slug,
                'article': p.article,
                'price': p.price,
                'wholesale_price': p.wholesale_price,
                'quantity': p.quantity,
                'is_visible': p.is_visible,
                'description': p.description,
                'category_id': p.category_id,
                'image_url': first_image.url if first_image else None,
                'status': status_info,
                'brand': brand_info,
                'category': category_info,
                'availability_status': availability_status
            })
        
        return jsonify({
            'brand': brand_name,
            'products': result,
            'total_count': len(result)
        })
    except Exception as e:
        logger.error(f"Error getting detailed products by brand {brand_name}: {str(e)}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –ø–æ –±—Ä–µ–Ω–¥—É'}), 500

@products_bp.route('/brand/<string:brand_name>/categories', methods=['GET'])
def get_categories_by_brand(brand_name):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –±—Ä–µ–Ω–¥—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ URL
        import urllib.parse
        brand_name = urllib.parse.unquote(brand_name)
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –±—Ä–µ–Ω–¥—É
        from models.category import Category
        
        # –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
        category_ids = db.session.query(Product.category_id).filter(
            Product.brand == brand_name,
            Product.is_visible == True,
            Product.is_draft == False,
            Product.category_id.isnot(None)
        ).distinct().all()
        
        category_ids = [cat_id[0] for cat_id in category_ids]
        
        if not category_ids:
            return jsonify({'categories': []})
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = Category.query.filter(Category.id.in_(category_ids)).all()
        
        result = []
        for cat in categories:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
            product_count = Product.query.filter(
                Product.brand == brand_name,
                Product.category_id == cat.id,
                Product.is_visible == True,
                Product.is_draft == False
            ).count()
            
            result.append({
                'id': cat.id,
                'name': cat.name,
                'slug': cat.slug,
                'parent_id': cat.parent_id,
                'description': cat.description,
                'image_url': cat.image_url,
                'order': cat.order,
                'product_count': product_count
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        result.sort(key=lambda x: x['product_count'], reverse=True)
        
        return jsonify({
            'brand': brand_name,
            'categories': result
        })
    except Exception as e:
        logger.error(f"Error getting categories by brand {brand_name}: {str(e)}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –±—Ä–µ–Ω–¥—É'}), 500

@products_bp.route('/brand/<string:brand_name>/filter', methods=['GET'])
def get_products_by_brand_and_category(brand_name):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –±—Ä–µ–Ω–¥—É —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ URL
        import urllib.parse
        brand_name = urllib.parse.unquote(brand_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        category_id = request.args.get('category_id', type=int)
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = Product.query.filter(
            Product.brand == brand_name,
            Product.is_visible == True,
            Product.is_draft == False
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if category_id:
            query = query.filter(Product.category_id == category_id)
        
        products = query.all()
        
        result = []
        for p in products:
            first_image = ProductMedia.query.filter_by(product_id=p.id, media_type='image') \
                .order_by(ProductMedia.order).first()
            
            result.append({
                'id': p.id,
                'name': p.name,
                'slug': p.slug,
                'article': p.article,
                'price': p.price,
                'wholesale_price': p.wholesale_price,
                'quantity': p.quantity,
                'status': 'no' if p.status is None else str(p.status),
                'is_visible': p.is_visible,
                'country': p.country,
                'brand': 'no' if not p.brand else p.brand,
                'description': p.description,
                'category_id': p.category_id,
                'image': first_image.url if first_image else None
            })
        
        return jsonify({
            'brand': brand_name,
            'category_id': category_id,
            'products': result,
            'total_count': len(result)
        })
    except Exception as e:
        logger.error(f"Error filtering products by brand {brand_name}: {str(e)}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤'}), 500
