#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render
"""

import os
import sys
import psycopg2
import json
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render
RENDER_DB_URL = os.getenv("RENDER_DATABASE_URL")

def get_connection(db_url):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(db_url)
        return conn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def load_json_file(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return None

def clear_table(conn, table_name):
    """–û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É"""
    with conn.cursor() as cursor:
        cursor.execute(f"TRUNCATE TABLE {table_name} RESTART IDENTITY CASCADE;")
        conn.commit()
        print(f"‚úì –¢–∞–±–ª–∏—Ü–∞ {table_name} –æ—á–∏—â–µ–Ω–∞")

def insert_table_data(conn, table_name, data):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É"""
    if not data:
        print(f"‚ö† –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    with conn.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute(f"""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = '{table_name}' 
            ORDER BY ordinal_position;
        """)
        columns = [row[0] for row in cursor.fetchall()]
        
        # –°–æ–∑–¥–∞–µ–º SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        placeholders = ', '.join(['%s'] * len(columns))
        insert_sql = f"INSERT INTO {table_name} ({', '.join(columns)}) VALUES ({placeholders})"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        values_list = []
        for row in data:
            values = []
            for col in columns:
                value = row.get(col)
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                if isinstance(value, str) and value.endswith('Z'):
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ISO –¥–∞—Ç—É
                    try:
                        value = datetime.fromisoformat(value.replace('Z', '+00:00'))
                    except:
                        pass
                values.append(value)
            values_list.append(tuple(values))
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.executemany(insert_sql, values_list)
        conn.commit()
        print(f"‚úì –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(values_list)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}")

def import_table(conn, table_name, json_file):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    print(f"\nüîÑ –ò–º–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
    print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {json_file}...")
    data = load_json_file(json_file)
    if data is None:
        return
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
    
    if not data:
        print(f"‚ö† –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ Render
    print(f"üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ Render...")
    clear_table(conn, table_name)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –Ω–∞ Render
    print(f"üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –Ω–∞ Render...")
    insert_table_data(conn, table_name, data)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞"""
    print("üöÄ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –≤ Render")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render
    if not RENDER_DB_URL:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è RENDER_DATABASE_URL")
        print("   –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª: RENDER_DATABASE_URL=postgresql://...")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É —Å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    export_dir = "exported_data"
    if not os.path.exists(export_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ {export_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ export_to_json.py")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å
    index_file = os.path.join(export_dir, "export_index.json")
    if not os.path.exists(index_file):
        print(f"‚ùå –§–∞–π–ª –∏–Ω–¥–µ–∫—Å–∞ {index_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    index_data = load_json_file(index_file)
    if not index_data:
        return
    
    print(f"üìã –ò–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω:")
    print(f"   –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {index_data.get('export_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"   –¢–∞–±–ª–∏—Ü: {index_data.get('total_tables', 0)}")
    print(f"   –ó–∞–ø–∏—Å–µ–π: {index_data.get('total_records', 0)}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –Ω–∞ Render
    print("\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render...")
    conn = get_connection(RENDER_DB_URL)
    if not conn:
        return
    
    try:
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –Ω–∞ Render –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã!")
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
        if response.lower() != 'yes':
            print("‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        tables = index_data.get('tables', [])
        for table_info in tables:
            table_name = table_info['table']
            json_file = table_info['filename']
            
            if os.path.exists(json_file):
                try:
                    import_table(conn, table_name, json_file)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
                    continue
            else:
                print(f"‚ùå –§–∞–π–ª {json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print("\n" + "=" * 60)
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –Ω–∞ Render")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    main()
