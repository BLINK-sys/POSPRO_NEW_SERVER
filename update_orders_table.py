"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã orders - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è status_id
"""

from app import create_app
from extensions import db
from models import Order, OrderStatus

app = create_app()

with app.app_context():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–æ–ª–±–µ—Ü status_id
        inspector = db.inspect(db.engine)
        columns = [col['name'] for col in inspector.get_columns('orders')]
        
        if 'status_id' not in columns:
            print("–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü status_id –≤ —Ç–∞–±–ª–∏—Ü—É orders...")
            with db.engine.connect() as conn:
                conn.execute(db.text("""
                    ALTER TABLE orders 
                    ADD COLUMN status_id INTEGER
                """))
                conn.commit()
            print("‚úÖ –°—Ç–æ–ª–±–µ—Ü status_id –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            print("‚úÖ –°—Ç–æ–ª–±–µ—Ü status_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
        try:
            print("–°–æ–∑–¥–∞—ë–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á –¥–ª—è status_id...")
            with db.engine.connect() as conn:
                conn.execute(db.text("""
                    ALTER TABLE orders 
                    ADD FOREIGN KEY (status_id) REFERENCES order_statuses(id)
                """))
                conn.commit()
            print("‚úÖ –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è  –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è status_id –Ω–∞ –æ—Å–Ω–æ–≤–µ status
        print("–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã
        statuses = {status.key: status.id for status in OrderStatus.query.all()}
        print(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤: {statuses}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã
        orders = Order.query.filter(Order.status_id.is_(None)).all()
        updated_count = 0
        
        for order in orders:
            if order.status in statuses:
                order.status_id = statuses[order.status]
                updated_count += 1
        
        if updated_count > 0:
            db.session.commit()
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–∫–∞–∑–æ–≤")
        else:
            print("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã —É–∂–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π status_id")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        all_orders = Order.query.all()
        orders_with_status_info = [o for o in all_orders if o.status_id is not None]
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(all_orders)}")
        print(f"   –° status_id: {len(orders_with_status_info)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        columns_after = [col['name'] for col in inspector.get_columns('orders')]
        print(f"\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ orders: {len(columns_after)}")
        for col in columns_after:
            print(f"   - {col}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.session.rollback()

print("\nüéâ –ì–æ—Ç–æ–≤–æ!")
